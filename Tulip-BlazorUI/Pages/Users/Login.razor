@page "/login"

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager

<h3 class="card-title text-center">Login</h3>
<br />
<hr />
<br />
@if (isFailed)
{
    <ErrorMessage Message="An error occurred while processing your request. Please try again!" />
}
@if (isProcess)
{
    <LoadingMessage />
}
else
{
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
                <ValidationMessage For="@(() => Model.EmailAddress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </EditForm>
    </div>
}



@code {
    private LoginModel Model = new LoginModel();
    private bool isFailed = false;
    private bool isProcess = false;

    private async Task HandleLogin()
    {
        isProcess = true;
        var response = await _authRepo.Login(Model);
        if (response)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            isFailed = true;
            isProcess = false;
        }

    }
}
