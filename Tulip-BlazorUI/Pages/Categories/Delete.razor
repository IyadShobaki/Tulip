@page "/categories/delete/{Id:int}"

@inject ICategoryRepository _cateRepo
@inject NavigationManager _navManager

<h3>Are you sure you want to delete this category and all products assocaited with it?</h3>
@if (isFailed)
{
    <ErrorMessage Message="Something went wrong with deleting attempt" />
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Category Data..." />
}
else
{
    <div class="col-md-4">
        <h4>Category Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>Category Name</td>
                <td>@Model.CategoryName</td>
            </tr>
        </table>
        @if (Model.Products == null || Model.Products.Count < 1)
        {
            <InfoMessage Message="No Products under this category" />
        }
        else
        {
            <div class="card" style="width:18rem;">
                <div class="card-header">
                    <h4>Category's Products</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var product in Model.Products)
                    {
                        <li class="list-group-item">@product.ProductName</li>
                    }
                </ul>
            </div>
        }

    </div>
}
<br />
<button class="btn btn-danger" @onclick="DeleteCategory">
    <span class="oi oi-delete"></span> Delete Category
</button>

<button class="btn btn-outline-secondary" @onclick="BackToCategories">
    <span class="oi oi-media-skip-backward"></span> Back To Categories
</button>

@code {
    [Parameter]
    public int Id { get; set; }

    private Category Model = new Category();
    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        Model = await _cateRepo.Get(Endpoints.CategoriesEndpoint, Id);
    }

    private async Task DeleteCategory()
    {
        //TODO - Delete all products first under this category

        bool isSuccess = await _cateRepo.Delete(Endpoints.CategoriesEndpoint, Model.Id);
        if (isSuccess)
        {
            BackToCategories();
        }
        else
        {
            isFailed = true;
        }
    }
    private void BackToCategories()
    {
        _navManager.NavigateTo("/categories");
    }
}

