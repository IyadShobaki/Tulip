@page "/categories/delete/{Id:int}"
@attribute [Authorize(Roles = "Administrator")]
@inject ICategoryRepository _cateRepo
@inject NavigationManager _navManager

<h3 class="card-title text-center">Are you sure you want to delete this category and all products assocaited with it?</h3>
<br />
<hr />
<br />
@if (isFailed)
{
    <ErrorMessage Message="An error occurred while processing your request. Please try again!" />
}

@if (Model == null)
{
    <LoadingMessage/>
}
else
{
    <div class="col-md-12">
        <h4>Category Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>Category Name</td>
                <td>@Model.CategoryName</td>
            </tr>
        </table>
        @if (Model.Products == null || Model.Products.Count < 1)
        {
            <InfoMessage Message="No Products under this category" />
        }
        else
        {
            <div class="card" >
                <div class="card-header text-white" style="background-color: #00AA9E;">
                    <h4>Category's Products</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var product in Model.Products)
                    {
                        <li class="list-group-item">@product.ProductName</li>
                    }
                </ul>
            </div>
        }

    </div>
}
<br />
<div class="container">
    <div class="row ">
        <div class="col col-lg-6 text-center">
            <button class="btn btn-outline-secondary col-6" @onclick="BackToCategories">
                <span class="oi oi-media-skip-backward"></span> Back To Categories
            </button>
        </div>
        <div class="col col-lg-6 text-center">
            <button class="btn btn-danger" @onclick="DeleteCategory">
                <span class="oi oi-delete"></span> Delete Category
            </button>
        </div>
    </div>
</div>
    @code {
        [Parameter]
        public int Id { get; set; }

        private Category Model = new Category();
        private bool isFailed = false;

        protected override async Task OnInitializedAsync()
        {
            Model = await _cateRepo.Get(Endpoints.CategoriesEndpoint, Id);
        }

        private async Task DeleteCategory()
        {
            //TODO - Delete all products first under this category

            bool isSuccess = await _cateRepo.Delete(Endpoints.CategoriesEndpoint, Model.Id);
            if (isSuccess)
            {
                BackToCategories();
            }
            else
            {
                isFailed = true;
            }
        }
        private void BackToCategories()
        {
            _navManager.NavigateTo("/categories");
        }
    }

